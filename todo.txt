//TODO: Limitar el tamaño de el nombre de usuario hasta 20
 limitar tmb la direccion la contraseña etc etc
Crea un administrador en la BD
eliminar el modelo de admin

Hacer q las ordenes cancelas persistan durante al menos 24h y darle a la seccion de admin la opcion
de poner el motivo por el q fue cancelada

cambiar en los req.params de los formularios para usar la desustructuracion
eje:
const nombre = req.params.name;
const user = req.params.user
const age = req.params.age



Add ttl to password confirmation or to certain links
debería decir :noticar nuevos productos
añadir la hora a la que fué añadido el nuevo producto

const {nombre,age,user} = req.params

crear un middleware para el manejo de errores

cambiar las rutas para poder subir varias fotos de las mascotas


implementar la recuperacion de contraseñas
las notificaciones

añadir util.promisify

usar skip y limit para poder controlar las imagenes q necesito
agregar indices a la base de datos para acelerar


//buscar todos los httpstatus codes

incluir helmet csurf rate-limiter
realizar npm audit
añadir sonido a la pagina

implementar scrollSpy


cambiar bcryptjs por bcrypt

revisar en los promises q para q un evento suba el q lo genera debe ser return
poner un usuario y contraseña en mongo db
eje:

no me gusta la palabra orden prefiero pedido


las ordenes solo podran cancelarse por el usuario mientras esten en pending

decirle a jesus q elimine las animaciones para cuando no se usen ejemplo
los div.line-element en mobile no deberian animarse
eliminar las validaciones en los schemas y hacerlas antes de guardar


$ npm audit


$ npm install -g snyk
$ cd your-app
$ snyk test
$ snyk wizard

agregar un estilo para ul.error
añadir un estilo para cuando no hayan nuevas mascotas
agregar el nuevo footer

revisar si pug se puede usar en produccion
como hacer q las peticiones en express se hagan en paralelo
asi sube hasta q el error es atrapado
    let fs = require("fs/promises");

    p.then((res) => {
    console.log(res);
    return fs.access("D:/xxx.xxx");
    }).catch((err) => {
    //   console.log(err);
    });
asi no lo hace
    let fs = require("fs/promises");

    p.then((res) => {
    console.log(res);
    fs.access("D:/xxx.xxx");
    }).catch((err) => {
    //   console.log(err);
    });